from flask import render_template, request, redirect, url_for, Flask, jsonify
from app import app
import redis
import os
import openai
from dotenv import load_dotenv
import re
import pandas as pd
import numpy as np 
# from transformers import pipeline
from typing import Union, List, Callable
import json
import os
import openai
openai.api_key = os.environ.get('CHATGPT_API_KEY')
from io import StringIO
import requests

# Imports for asynchronous tasks
from worker.task import get_result_from_GPT, get_expense_data

openai.api_key = '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'

load_dotenv()


@app.route('/')
def index():
    return render_template('form.html')

@app.route('/submit_form', methods=['POST'])
def submit():

    """
    Saves user data from submitted form to a Redis database based on the information provided in a POST request.

    Parameters:
    None

    Returns:
    A Flask response object with the 'success.html' template and a user_id parameter.

    Raises:
    None
    """
    db = redis.Redis(host='localhost', port=6379, db=0)
    if request.method == 'POST':

        # Grab file upload and user_id
        cc_history =  request.files['cc_upload']
        if cc_history:
            # Save the file to Redis
            db.hset(user_id, 'uploaded_csv', cc_history.read())
            
        
        user_id = request.form['user_id']

        
        user_id = request.form['user_id']
        db.hset(user_id, 'age', request.form['age'])
        db.hset(user_id, 'occupation', request.form['occupation'])
        db.hset(user_id, 'annual_income', request.form['annual_income'])
        db.hset(user_id, 'rent', request.form['rent'])
        db.hset(user_id, 'location', request.form['location'])
        db.hset(user_id, 'investment_goal', request.form['investment_goal'])
        db.hset(user_id, 'investment_proportion', request.form['allocation_proportion'])
        db.hset(user_id, 'goal_achievement_time', request.form['time'])
        db.hset(user_id, 'risk_tolerance', request.form['risk_tolerance'])
        db.hset(user_id, 'investment_type', request.form['investment_types'])
        if request.form['investment_goal'] == 'house':
            db.hset(user_id, 'house_price', request.form['house_amount'])
            db.hset(user_id, 'house_settlement', request.form['house_settlement'])
            db.hset(user_id, 'house_loan_years', request.form['house_loan_years'])
        elif request.form['investment_goal'] == 'car':
            db.hset(user_id, 'car_price', request.form['car_price'])
            db.hset(user_id, 'car_settlement', request.form['car_settlement'])
            db.hset(user_id, 'car_loan_years', request.form['car_loan_years'])
        elif request.form['investment_goal'] == 'retirement':
            db.hset(user_id, 'retirement_year', request.form['retirement_year'])
            db.hset(user_id, 'retirement_monthly_income', request.form['retirement_income'])
        elif request.form['investment_goal'] == 'college':
            db.hset(user_id, 'total_savings', request.form['total_savings'])
    
    expense_task = get_expense_data.delay(user_id)
    advice_task = get_result_from_GPT.delay(user_id)
    
    redirect(url_for('success', user_id=user_id))
    return jsonify({'expense_task_id': expense_task.id, 'advice_task_id': advice_task.id}), 202




@app.route('/check_task_status/<expense_task_id>/<advice_task_id>', methods=['GET'])
def check_task_status(expense_task_id, advice_task_id):
    expense_task = get_expense_data.AsyncResult(expense_task_id)
    advice_task = get_result_from_GPT.AsyncResult(advice_task_id)
    if advice_task.ready():
        result = advice_task.result
        ### 这里你想想怎么visualize result就行
        # Render the success/viz page or return the data as JSON
        # return render_template('success.html', result=result)
        return jsonify({'status': 'completed', 'result': result})
    else:
        # Print current progress or return the status as JSON
        # print(f'Task is not yet complete. Current status: {task.state}')
        return jsonify({'status': 'in_progress', 'current_state': advice_task.state})


# @app.route('/success/<user_id>')
# def success(user_id):
#     # user_id = db.get('user_id')
#     # if user_id:
#     #     user_id = user_id.decode('utf-8')

#     result = chat_gpt_result(user_id)

#     return render_template('success.html', user_id=user_id, result = result)


# @app.route('/get_response', methods=['GET'])
# def chat_gpt_result(user_id):
#     """
#     Retrieves a response generated by the OpenAI GPT model based on the given user ID.

#     Args:
#         user_id (str): The unique identifier for the user.

#     Returns:
#         If the response was successfully generated, returns the generated text and a status code of 200.
#         If the response generation failed, returns an error message and a status code of 500.
#     """
#     text, status_code = get_result_from_GPT(user_id)
#     if status_code == 500:
#         return 'Unable to complete prompt', 500
#     elif status_code == 200:
#         return text
